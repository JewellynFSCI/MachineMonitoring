// <auto-generated />
using System;
using MachineMonitoring.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MachineMonitoring.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250527053114_ResetDB")]
    partial class ResetDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("MachineMonitoring.Models.Authority", b =>
                {
                    b.Property<int>("AuthorityLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("AuthorityLevel"));

                    b.Property<DateTime>("AddDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("AuthorityDescription")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("AuthorityName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("User")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("AuthorityLevel");

                    b.ToTable("Authority");
                });

            modelBuilder.Entity("MachineMonitoring.Models.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("LocationId"));

                    b.Property<DateTime>("AddDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("PlantNo")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("User")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("LocationId");

                    b.HasIndex("PlantNo");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("MachineMonitoring.Models.Machine", b =>
                {
                    b.Property<string>("MachineCode")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("AddDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("MachineDetails")
                        .HasColumnType("longtext");

                    b.Property<string>("MachineName")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("User")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("MachineCode");

                    b.ToTable("Machines");
                });

            modelBuilder.Entity("MachineMonitoring.Models.MachineLocation", b =>
                {
                    b.Property<int>("MachineLocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("MachineLocationId"));

                    b.Property<DateTime>("AddDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("MachineCode")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("MachineCoordinates")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("PlantNo")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("User")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("MachineLocationId");

                    b.HasIndex("LocationId");

                    b.HasIndex("MachineCode");

                    b.HasIndex("PlantNo");

                    b.ToTable("MachineLocations");
                });

            modelBuilder.Entity("MachineMonitoring.Models.Plant", b =>
                {
                    b.Property<int>("PlantNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("PlantNo"));

                    b.Property<DateTime>("AddDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PlantName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("User")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("PlantNo");

                    b.ToTable("Plants");
                });

            modelBuilder.Entity("MachineMonitoring.Models.ProductionMap", b =>
                {
                    b.Property<int>("ProductionMapId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProductionMapId"));

                    b.Property<DateTime>("AddDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<int>("PlantNo")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("User")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ProductionMapId");

                    b.HasIndex("LocationId");

                    b.HasIndex("PlantNo");

                    b.ToTable("ProductionMaps");
                });

            modelBuilder.Entity("MachineMonitoring.Models.SystemUser", b =>
                {
                    b.Property<int>("EmployeeNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EmployeeNo"));

                    b.Property<string>("AccountStatus")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("AddDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("AuthorityLevel")
                        .HasColumnType("int");

                    b.Property<string>("EmployeeName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("PlantNo")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("User")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("EmployeeNo");

                    b.HasIndex("AuthorityLevel");

                    b.HasIndex("PlantNo");

                    b.ToTable("SystemUsers");
                });

            modelBuilder.Entity("MachineMonitoring.Models.Location", b =>
                {
                    b.HasOne("MachineMonitoring.Models.Plant", "Plant")
                        .WithMany()
                        .HasForeignKey("PlantNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plant");
                });

            modelBuilder.Entity("MachineMonitoring.Models.MachineLocation", b =>
                {
                    b.HasOne("MachineMonitoring.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MachineMonitoring.Models.Machine", "Machine")
                        .WithMany()
                        .HasForeignKey("MachineCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MachineMonitoring.Models.Plant", "Plant")
                        .WithMany()
                        .HasForeignKey("PlantNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Machine");

                    b.Navigation("Plant");
                });

            modelBuilder.Entity("MachineMonitoring.Models.ProductionMap", b =>
                {
                    b.HasOne("MachineMonitoring.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MachineMonitoring.Models.Plant", "Plant")
                        .WithMany()
                        .HasForeignKey("PlantNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Plant");
                });

            modelBuilder.Entity("MachineMonitoring.Models.SystemUser", b =>
                {
                    b.HasOne("MachineMonitoring.Models.Authority", "Authority")
                        .WithMany()
                        .HasForeignKey("AuthorityLevel")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MachineMonitoring.Models.Plant", "Plant")
                        .WithMany()
                        .HasForeignKey("PlantNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Authority");

                    b.Navigation("Plant");
                });
#pragma warning restore 612, 618
        }
    }
}
